library(mtcars)
load(mtcars)
load("mtcars")
data(mtcars)
names(mtcars)
fit <- lm(mpg~wt,data=mtcars)
summary(fit)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
e <- resid(fit)
e
summary(fit)
sum(e)
data(mtcars)
fit2 <- lm(mpg~wt,mtcars)
summary(car)
summary(fit2)
summary(fit)$sigma
?mtcars
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1)*qt(.95,df=fit$df)*sumCoef[1,2]
sumCoef[1,1] + c(-1,1)*qt(.95,df=fit2$df)*sumCoef[1,2]
fit <- lm(mpg~wt,mtcars)
sumCoef[1,1] + c(-1,1)*qt(.95,df=fit$df)*sumCoef[1,2]
sumCoef[2,1] + c(-1,1)*qt(.95,df=fit$df)*sumCoef[2,2]
sumCoef[1,1] + c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[2,1] + c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
predict(fit, mean(mtcars$wt), interval="confidence")
names(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
predict(fit, data.frame(x=mean(x)),inteval="confidence")
predict(fit, data.frame(x=mean(x)),interval="confidence")
data.frame(x=mean(x))
mean(x)
predict(fit, data.frame(3000/1000),interval="confidence")
predict(fit, data.frame(x=3),interval="prediction")
predict(fit, data.frame(x=2),interval="confidence")
fit <- lm(y~I(x/2))
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[2,1] + c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2]
library(swirl)
swirl()
library(swirl)
swirl()
1
swirl()
fit <- lm(child~parent,data=galton)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, (varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit,attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
data(mtcars)
plot(mpg~wt, mtcars)
abline(lm(mpg~wt, mtcars))
fit <- lm(mpg~wt, mtcars)
summary(fit)
fit <- lm(mpg~I(wt-mean(wt)), mtcars)
plot(mpg~wt, mtcars)
abline(lm(mpg~I(wt-mean(wt)), mtcars))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
data(mtcars)
fit <- lm(mpg~wt, mtcars)
summary(fit)
coef <- summary(fit)$coefficients
coef[1,1]
?lm
?predict
predict(fit, data.frame(mean(mtcars$wt)),interval="confidence")
x <- mtcars$wt
y - mtcars$mpg
y <- mtcars$mpg
fit(y~x)
fit<- lm(y~x)
predict(fit, data.frame(mean(x)), interval="confidence")
predict(fit, data.frame(x=mean(x)), interval="confidence")
data(swiss)
require(stats)
require(graphics)
pairs(swiss,panel=panel.smooth main="Swiss data",col=3+(swiss$Catholic>50))
pairs(swiss,panel=panel.smooth, main="Swiss data",col=3+(swiss$Catholic>50))
summary(lm(Fertility~.,data=swiss))
lm(Fertility~Agriculture, data=swiss)
summary(lm(Fertility~Agriculture, data=swiss))
data(mtcars)
fit <- lm(mpg~wt+cyl, mtcars)
summary(fit)
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child~ones+parent-1,galton)
lm(child~parent,galton)
lm(child~1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2),coef)
lm(Fertility~.,swiss)
all <- lm(Fertility~.,swiss)
summary(all)
lm(Fertility~agriculture, swiss)
lm(Fertility~Agriculture, swiss)
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
cor(swiss$Education, swiss$Agriculture)
makelms()
ex <- swiss$Examination + swiss$Education
ec <- swiss$Examination + swiss$Education
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~. + ec, swiss)
all-efit
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSpray)[2]
summary(InsectSprays)[2]
summary(InsectSprays[,2])
sapply(InsectSprays,)
sapply(InsectSprays, FUN=class)
sapply(InsectSprays, class)
fit <- lm(spray~count, InsectSprays)
fit <- lm(count~spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- fit[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~ spray - 1, InsectSpray)
nfit <- lm(count~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- InsectSprays$spray
spray2 <- relevel(InsectSprays$spray,\"c\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2(count~spray, spray2)
fit2<-lm(count~spray, spray2)
fit2<-lm(count~spray, InsectSprays)
fit2<-lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2]-fit$coef[3]
fit$coef[2]-fit$coef[3]/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
swirl()
data(mtcars)
dim(mtcars)
str(mtcars)
?mtcars
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
?pairs
chart <- pairs(mpg~., mtcars)
chart <- pairs(mpg~., mtcars, col = mtcars$am)
plot(mpg~am, mtcars)
?mtcars
lm(mpg~., mtcars)
fit <- lm(mpg~., mtcars)
summary(fit)
fit2 <- step(fit, direction = "backward")
summary(fit2)
auto <- mtcars$am == 0
auto
tran <- mtcars$am == 0
fit3 <- lm(mpg~tran, mtcars)
summary(fit3)
fit3 <- lm(mpg~(tran==FALSE), mtcars)
summary(fit3)
fit3 <- lm(mpg~tran, mtcars)
summary(fit3)
t.test(mpg~am, mtcars)
library("reshape2", lib.loc="~/R/win-library/3.1")
tapply
?tapply
data <- read.csv("C:/Users/Jeffrey/Desktop/Sunsweet - Category P52W Raw Data without Subtotals.csv")
View(data)
data2 <- by(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), fun=colSums)
data2 <- by(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), FUN=colSums)
?as.data.frame
dataClean <- as.data.frame(data2)
data2
data2 <- tapply(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), FUN=colSums)
data2 <- vapply(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), FUN=colSums)
?apply
data2 <- apply(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), FUN=colSums)
data3 <- aggregate(data[,1:3], data[,4:29], FUN = sum)
?aggregate
data3 <- aggregate(as.matrix(data[,1:3]), as.list(data[,4:29]), FUN = sum)
data3 <- tapply(as.matrix(data[,1:3]), as.list(data[,4:29]), FUN = sum)
?apply
?tapply
?lapply
?by
sapply(data2,coef)
data2 <- with(data, by(data[,4:29], list(data$Store..,data$Brand.Name,data$Description), FUN=colSums))
sapply(data2, coef)
data2
data3 <- aggregate(cbind(data[,4:29])~Store..+Brand.Name+Description, data=data, sum)
cbind(data[,4:29])
data3 <- aggregate(cbind(data[, 4:29])~"Store.."+Brand.Name+Description, data=data, sum)
data3 <- aggregate(cbind(data[,4:29])~Store..+Brand.Name+Description, data=data, sum)
data3 <- aggregate(cbind(data[,4:29])~data$Store..+data$Brand.Name+data$Description, data=data, sum)
library(data.table)
dt <- data.table(data)
View(dt)
dt[,list(.SD,sum), bt=colnames(dt)[1:3]]
dt[,list(.SD,sum), by=colnames(dt)[1:3]]
dt[,list(.SD,sum), by=list((dt)[1:3])]
dt[,list(.SD,sum), by=list(data$Store.., data$Brand.Name, data$Description)]
dt[,list(.SD,sum), by=list(dt$Store.., dt$Brand.Name, dt$Description)]
data.table(data2)
test<- data.table(data2)
View(test)
?lapply
?tapply
tapply(data[,4:49], list(data$Brand.Name, dadta$Description), FUN=sum)
tapply(data[,4:49], list(data$Brand.Name, data$Description), FUN=sum)
tapply(data$Units.Sold, list(data$Brand.Name, data$Description), FUN=sum)
tapply(data[,4:5], list(data$Brand.Name, data$Description), FUN=sum)
?aggregate
aggregate(data$Units.Sold, list(data$Brand.Name, data$Description), FUN=sum)
test<-aggregate(data$Units.Sold, list(data$Brand.Name, data$Description), FUN=sum)
View(test)
Sunsweet...Category.P52W.Raw.Data.without.Subtotals <- read.csv("C:/Users/Jeffrey/Desktop/Sunsweet - Category P52W Raw Data without Subtotals.csv")
View(Sunsweet...Category.P52W.Raw.Data.without.Subtotals)
scale_color_brewer(palette = 'Accent')
gplot(data = diamonds, x=carat, y=price, color = cut) +
install.packages('ggplot2')
library(ggplot2)
install.packages('RColorBrewer')
library(RColorBrewer)
data(diamonds)
qplot(data = diamonds, x=carat, y=price, color = cut) +
scale_color_brewer(palette = 'Accent')
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
install.packages('swirl')
library(swirl)
swirl()
udacious
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Jeffrey Solis")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Misha/Chex")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
getwd()
data(diamonds)
diamond <- data(diamonds)
head(diamonds)
diamond <- data(diamonds)
library(ggplot2)
diamond <- data(diamonds)
len(diamond)
length(diamond)
library(ggplot2)
diamond <- data(diamonds)
summary(diamond)
diamond
diamonds
library(ggplot2)
diamond <- diamonds
name(diamond)
names(diamond)
str(diamond)
?diamonds
qplot(x = price, data = diamonds)
summary(diamond$price)
qplot(x = price, data = diamonds, binwidth = 15)
fivehundred <- subset(diamonds, price < 500)
fivehundred <- subset(diamonds, price < 250)
fivehundred <- subset(diamonds, price < 250)
fivehundred <- subset(diamonds, price < 15000)
fivehundred <- subset(diamonds, price > 15000)
fivehundred <- subset(diamonds, price < 250)
fivehundred <- subset(diamonds, price >= 15000)
qplot(x = price, data = diamonds, binwidth = 15)
?diamonds
qplot(x = prices, data = diamonds) +
facet_grid(cut, 5)
qplot(x = prices, data = diamonds) +
facet_grid(cut, rows = 5)
qplot(x = prices, data = diamonds) +
facet_wrap(~cut, ncol = 5)
qplot(x = price, data = diamonds) +
facet_wrap(~cut, ncol = 5)
by(diamond$price, diamond$cut, summary)
by(diamond$price, diamond$cut, max)
qplot(x = price, data = diamonds) +
facet_wrap(~cut)
qplot(x = price, data = diamonds) +
facet_wrap(~cut, scales="free_y")
qplot(x = price/carat, data = diamonds) +
facet_wrap(~cut, scales="free_y")
import(ggplot2)
library(ggplot2)
d <- dataset(diamonds)
d <- data(diamonds)
diamonds
d <- diamonds
names(d)
ggplot(aes(x = price, y = x), data = d)
ggplot(aes(x = price, y = x), data = d) +
geom_line()
ggplot(aes(x = price, y = x), data = d) +
geom_plot(
ggplot(aes(x = price, y = x), data = d) +
geom_point()
.
ggplot(aes(x = price, y = x), data = d) +
geom_point()
cor.test(d$price, d$x)
cor.test(d$price, d$y)
cor.test(d$price, d$z)
ggplot(aes(x = price, y = depth), data = d) +
geom_point()
?ggplot
?geom_plot
?geom_point
ggplot(aes(x = price, y = depth), data = d) +
geom_point(alpha = 1/100)
min(d$price)
cor.test(d$depth, d$price)
ggplot(aes(x = price, y = carat), data = d) +
geom_plot()
ggplot(aes(x = price, y = carat), data = d) +
geom_point()
d[volume] = (d$x * d$y * d*z)
d[,"volume"] = (d$x * d$y * d*z)
volume <- (d$x * d$y * d*z)
2*3
d[,"volume"] <- (d$x * d$y * d$z)
names(d)
head(d)
ggplot(aes(x = price, y = volume), data = d) +
geom_point()
d_no_zero <- subset(d, volume = 0 | volume >= 800)
d_no_zero <- subset(d, volume != 0 | volume <= 800)
d_no_zero <- subset(d, volume != 0)
d_no_zero <- subset(d, volume <800)
d_no_zero <- subset(d, volume <800 || volume != 0)
d_no_zero <- subset(d, 0 < volume < 800)
d_no_zero <- subset(d, volume < 800 | volume != 0)
d_no_zero <- subset(d, volume < 800)
d_no_zero <- subset(d, volume > 0)
d_no_zero <- subset(d, (volume > 0 | volume < 800))
d_no_zero <- subset(d, (volume > 0 | volume > 800))
d_no_zero <- subset(d, volume > 800)
d_no_zero <- subset(d, volume => 800)
d_no_zero <- subset(d, volume > 0)
d_no_zero <- subset(d, volume > 0 & volume < 0)
d_no_zero <- subset(d, volume > 0 & volume < 800)
d2 <- subset(d, volume > 0 & volume < 800)
cor.test(d2$price, d2$volume)
d2 <- subset(d, volume > 0)
d2 <- subset(d, volume < 800)
& volume < 800
ggplot(aes(x = price, y = volume), data = d2)
ggplot(aes(x = price, y = volume), data = d2) +
geom_point()
?geom_smooth
ggplot(aes(x = price, y = volume), data = d2) +
geom_point() +
geom_smooth()
ggplot(aes(x = price, y = volume), data = d2) +
geom_point(alpha = 1/100) +
geom_smooth()
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
d <- d
d <- data(diamonds)
names(d)
d <- diamonds
names(d)
d[,"volume"] <- (d$x * d$y * d$z)
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
d <- diamonds
names(d)
d[,"volume"] <- (d$x * d$y * d$z)
diamondsByClarity <- group_by(d, clarity)
import('dplyr')
install('dplyr')
install.packages('dplyr')
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages('dplyr')
library("plyr", lib.loc="~/R/win-library/3.1")
suppressMessages(library(plyr))
diamondsByClarity <- group_by(d, clarity)
instal.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
suppressMessages(library(ggplot2))
install.packages('ggplot2')
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
install.packages('dplyr')
suppressMessages(library(dplyr))
d <- diamonds
d[,'volume'] <- (d$x*d$y*d$z)
diamondsByClarity <- group_by(d, clarity)
summarise(dimaondsByClarity,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamondsByClarity <- group_by(d, clarity)
summarise(diamondsByClarity,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamondsByClarity.price_by_clarity <- summarise(diamondsByClarity,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
View(diamondsByClarity.price_by_clarity)
names(d)
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages('knitr', dependencies = T)
qplot(x = residual.sugar, data = wine, binwidth = .5, xlim = c(0,20))
library(GGally)
?ggpairs
?theme
?ggpairs
by(wine$volatile.acidity, wine$quality, median)
library(ggplot2)
library(GGally)
library(dplyr)
library(gridExtra)
library(corrplot)
setwd("C:/Users/Jeffrey/Desktop/Data Analysis Coursera/Project 4/Project")
wine <- read.csv('wineQualityWhites.csv')
wine <- wine[2:13] # The first column contained number 1 to 4898.  Ignore
wine$quality.cat <- ifelse(wine$quality > 6, "High",
ifelse(wine$quality < 6, "Low", "Medium"))
wine$quality.cat <- factor(wine$quality.cat)
wine$quality.cat <- ordered(wine$quality.cat, c("Low","Medium","High"))
wine$quality <- factor(wine$quality)
ggplot(aes(x = alcohol/residual.sugar, y = alcohol), data = wine) +
geom_point(aes(color = quality.cat))  +
scale_y_log10()
ggplot(aes(x = alcohol*residual.sugar, y = alcohol), data = wine) +
geom_point(aes(color = quality.cat))  +
scale_y_log10()
